---
import BlogLayout from "../../layouts/BlogLayout.astro";

const post = {
  title: "Balancing drama coursework with early IT projects",
  date: "2020-08-24",
  readTime: "4 min read",
  category: "DevOps",
  excerpt:
    "Struggling theatre rehearsals with side tinkering — from running Plex servers to hosting Minecraft worlds and building my first VPN — all while on a theatre scholarship.",
  slug: "balancing-drama-and-it-projects",
};
---

<BlogLayout post={post}>
  <h2>Balancing Stage and Servers</h2>
  <p>
    During my theatre scholarship, most of my classmates were memorizing lines
    or rehearsing scenes. I was doing that too — but between classes and late-night
    rehearsals, I was also tinkering with a Raspberry Pi, setting up Plex servers,
    and trying (and failing) to run a Minecraft world for friends. 
  </p>

  <p>
    On stage, timing and presence mattered. Behind the screen, so did uptime
    and configuration. Balancing both worlds meant I was constantly moving
    between scripts and scripts — one in Final Draft, the other in Bash.
  </p>

  <h2>The Juggling Act</h2>
  <p>
    Coursework wasn’t light. Theatre demanded long hours, group rehearsals, and
    emotional energy. IT projects demanded patience, documentation, and trial and
    error. My weekends became experiments in context switching:
  </p>

  <ol>
    <li><strong>Plex servers:</strong> Organizing media libraries and teaching myself networking basics.</li>
    <li><strong>Minecraft hosting:</strong> Learning about ports, memory allocation, and why uptime matters.</li>
    <li><strong>VPN setup:</strong> Wrestling with routers, firewalls, and the joy of finally connecting remotely.</li>
  </ol>

  <blockquote>
    “Theatre taught me how to perform under pressure. IT projects taught me how
    to debug under pressure.”
  </blockquote>

  <h2>Lessons from Both Worlds</h2>
  <h3>Documentation Matters</h3>
  <p>
    Just like keeping a prompt book in stage management, writing down configs and
    commands saved me from repeating the same mistakes twice.
  </p>

  <h3>Empathy in Tech</h3>
  <p>
    Theatre is about understanding people. IT support is the same — whether it’s
    helping a peer connect to my Minecraft server or calming a frustrated classmate
    when the VPN broke.
  </p>

  <h3>Systems Thinking</h3>
  <p>
    Plays only work when the lighting, sound, and actors sync up. Servers only
    work when networking, storage, and security play their parts. Both taught me
    to think about the system, not just the piece in front of me.
  </p>

  <h2>Looking Back</h2>
  <p>
    At the time, it felt like I was just splitting myself in two — drama kid by
    day, IT tinkerer by night. But looking back, the overlap was clear. Both
    disciplines required patience, presence, and the ability to keep calm when
    things went off-script.
  </p>

  <p>
    Those early side projects weren’t just distractions from coursework. They
    were the beginning of a systems mindset that carried into later work in IT
    and DevOps. And honestly? Hosting a Minecraft server that didn’t crash was
    just as satisfying as pulling off a standing ovation.
  </p>
</BlogLayout>

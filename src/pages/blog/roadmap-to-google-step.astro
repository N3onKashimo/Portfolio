---
import BlogLayout from "../../layouts/BlogLayout.astro";

const post = {
  title: "Roadmap to Google STEP: My Practice Plan",
  date: "2025-8-21",
  readTime: "5 min read",
  category: "Career",
  excerpt:
    "My current roadmap to the Google STEP internship.",
  slug: "roadmap-to-google-step",
};
---

<BlogLayout post={post}>
  <h2>Preparing for Google STEP: My Practice Plan</h2>
  <p>
    I’m building a <strong>no-paywall, low-stress</strong> path into software by targeting the 
    <strong> Google STEP Internship</strong> (and keeping apprenticeships open as a parallel track). 
    This plan trades endless “grind” for systems I can repeat on busy gym days, with exact videos,
    links, and habits that actually stick.
  </p>

  <p>
    My rule of thumb: <em>Try → Hint → (short) video → close the video and re-implement from memory</em>. 
    Cap new problems at <strong>25 minutes</strong>, and redo anything I needed help on at 
    <strong>48 hours</strong> and again at <strong>7 days</strong>. I also practice in a doc/notes editor
    1×/week (no running code) to simulate interview environments and force clear dry-runs.
  </p>

  <h2>My STEP Prep Roadmap</h2>
  <p>
    Instead of grinding forever, I’m following a 2-day kickstart and a lightweight weekly loop that
    strengthens resume, GitHub, and interview stories at the same time.
  </p>

  <h3>✅ Foundations</h3>
  <ul>
    <li>
      <strong>Method (5–10 min skim):</strong> 
      <a href="https://neetcode.io/courses/lessons/how-to-use-neetcode-effectively" target="_blank" rel="noreferrer">
        How to Use NeetCode Effectively
      </a> — the exact learning loop I’m using.
    </li>
    <li>
      <strong>Problem spine:</strong> 
      <a href="https://neetcode.io/practice?tab=neetcode150" target="_blank" rel="noreferrer">
        NeetCode 150 list
      </a> (or Grind75/Sean Prashad; links below). I’ll pick 2 new + 1 redo per day.
    </li>
    <li>
      <strong>Templates I must be able to type from memory:</strong> Sliding Window, Binary Search (incl. on-answer),
      Monotonic Stack (next greater), BFS/DFS, and a small Memoized DP function.
    </li>
  </ul>

  <h3>🎬 Exact 2-Day Kickstart (videos + reps)</h3>
  <p><em>Press play, then do 1–2 reps immediately after each anchor.</em></p>

  <h4>Day 1 (≈3–4h)</h4>
  <ol>
    <li>
      <strong>Method anchor (20m):</strong> 
      <a href="https://www.youtube.com/watch?v=aHZW7TuY_yo" target="_blank" rel="noreferrer">
        How I would learn LeetCode if I could start over (NeetCode)
      </a> — locks in the try→hint→video→re-implement loop.
    </li>
    <li>
      <strong>Binary Search (45–60m):</strong> 
      <a href="https://www.youtube.com/watch?v=s4DPM8ct1pI" target="_blank" rel="noreferrer">
        Binary Search — LeetCode 704 (NeetCode)
      </a>. Reps: LC 704 (classic) + a “BS on answer” problem (e.g., Koko 875).
      <br/><em>Hints:</em> maintain <code>answer ∈ [lo, hi]</code>, write a monotonic <code>check(mid)</code>, avoid infinite loops.
    </li>
    <li>
      <strong>Sliding Window (60–70m):</strong> 
      Watch the first 2 videos in the 
      <a href="https://www.youtube.com/playlist?list=PLot-Xpze53leOBgcVsJBEGrHPd_7x_koV" target="_blank" rel="noreferrer">
        Sliding Window playlist (NeetCode)
      </a>. Reps: LC 3 “no-repeat substring” + LC 904 (or LC 209).
      <br/><em>Hints:</em> expand while valid; <code>while invalid: shrink</code>; track counts; beware off-by-one on <code>left</code>.
    </li>
  </ol>

  <h4>Day 2 (≈3–4h)</h4>
  <ol>
    <li>
      <strong>Monotonic Stack (40–50m):</strong> Learn “next greater” using indices via 
      <a href="https://www.youtube.com/playlist?list=PLot-Xpze53leF0FeHz2X0aG3zd0mr1AW_" target="_blank" rel="noreferrer">
        NeetCode solutions playlist
      </a> (see “Daily Temperatures”). Reps: LC 739 + a variant (e.g., Next Greater Element).
      <br/><em>Hint:</em> you write results when you <em>pop</em>, not when you push.
    </li>
    <li>
      <strong>Graphs — BFS (60–75m):</strong> 
      <a href="https://www.youtube.com/watch?v=oDqjPvD54Ss" target="_blank" rel="noreferrer">
        William Fiset — BFS Shortest Path
      </a>. Reps: LC 200 (islands, BFS or DFS) + LC 994 (multi-source BFS).
      <br/><em>Hint:</em> mark visited on <em>push</em>; think in layers.
    </li>
    <li>
      <strong>DP intuition (45–60m):</strong> 
      <a href="https://www.youtube.com/watch?v=mBNrRy2_hVs" target="_blank" rel="noreferrer">
        Top 5 DP Patterns (NeetCode)
      </a>. Reps: LC 70 (memo + tab) + LC 198 (or LC 322 for a stretch).
      <br/><em>Hint:</em> always write: State → Transition → Base → Memo/Tab order.
    </li>
    <li>
      <strong>Mock block (35–45m):</strong> Solve one medium (e.g., LC 207 or LC 424) in a notes doc:
      5m restate/examples → 20–25m code (talk) → 10m dry-run → 5m Big-O/alternatives.
    </li>
  </ol>

  <h3>🔄 Weekly Loop (6 weeks, 5 days/week)</h3>
  <ul>
    <li><strong>Mon–Fri (90–120m):</strong> 2 new problems (25m cap each) + 1 redo (15–20m) + a 5m post-mortem note.</li>
    <li><strong>One mock (45m):</strong> every week in a doc (no running code), to train narration and dry-runs.</li>
    <li><strong>One template run:</strong> re-type a window/BS/BFS/stack/DP skeleton from memory.</li>
  </ul>

  <h3>🧠 Patterns To Own (STEP-level)</h3>
  <ul>
    <li>Arrays/Strings, Hash Map/Set tricks, Two Pointers &amp; <strong>Sliding Window</strong></li>
    <li><strong>Binary Search</strong> (classic + on-answer)</li>
    <li><strong>Monotonic Stack</strong> (next greater / “Daily Temps” style)</li>
    <li><strong>BFS/DFS</strong> (grids + topo)</li>
    <li>Intro <strong>DP</strong> (stairs, coin change, house robber, LIS/LCS lite)</li>
  </ul>

  <h3>🗒️ Hints & Insights I’m Following</h3>
  <ul>
    <li><strong>25-minute rule:</strong> if I stall, I peek a hint, then a short video, then close it and re-implement.</li>
    <li><strong>48h &amp; 7d redos:</strong> this is where retention happens.</li>
    <li><strong>Doc-mode practice:</strong> many interviews don’t allow running code; I dry-run by hand weekly.</li>
    <li><strong>Impact → how bullets:</strong> on resume/LinkedIn, start with a metric, then how I did it.</li>
    <li><strong>Low-energy menu:</strong> 30–45m = 1 new (25m cap) <em>or</em> 1 redo + notes. No zero days.</li>
  </ul>

  <h3>📚 Links I Tap During the Sprint</h3>
  <ul>
    <li><a href="https://neetcode.io/courses/lessons/how-to-use-neetcode-effectively" target="_blank" rel="noreferrer">NeetCode — How to Use NeetCode Effectively</a></li>
    <li><a href="https://neetcode.io/practice?tab=neetcode150" target="_blank" rel="noreferrer">NeetCode 150 list</a></li>
    <li><a href="https://www.youtube.com/playlist?list=PLot-Xpze53leOBgcVsJBEGrHPd_7x_koV" target="_blank" rel="noreferrer">NeetCode — Sliding Window playlist</a></li>
    <li><a href="https://www.youtube.com/watch?v=s4DPM8ct1pI" target="_blank" rel="noreferrer">NeetCode — Binary Search (LC 704)</a></li>
    <li><a href="https://www.youtube.com/watch?v=mBNrRy2_hVs" target="_blank" rel="noreferrer">NeetCode — Top 5 DP Patterns (video)</a></li>
    <li><a href="https://www.youtube.com/watch?v=oDqjPvD54Ss" target="_blank" rel="noreferrer">William Fiset — BFS Shortest Path</a></li>
    <li><a href="https://www.techinterviewhandbook.org/grind75/" target="_blank" rel="noreferrer">Grind75 (customizable free plan)</a></li>
    <li><a href="https://seanprashad.com/leetcode-patterns/" target="_blank" rel="noreferrer">Sean Prashad — LeetCode Patterns</a></li>
  </ul>

  <h3>🧩 Minimal Project/Portfolio (Optional & Beginner-Friendly)</h3>
  <ul>
    <li><strong>learning-dsa repo:</strong> README with why I’m practicing, patterns, and a weekly goal. Add a LeetCode badge to my profile README:<br/>
      <code>![LeetCode Stats](https://leetcard.jacoblin.cool/YOUR_USERNAME?ext=heatmap)</code>
    </li>
    <li><strong>Streamlit Sprint Timer (30–45m):</strong> a one-file app that shows a 45-min timer + checkboxes: restate → plan → code → dry-run → Big-O.</li>
    <li><strong>BFS Grid Visualizer (60–90m):</strong> tiny CLI or Streamlit toy; proves I’m applying DS&amp;A, not doing ops.</li>
  </ul>

  <h3>🗣️ Behavioral (STAR) — My 4 Short Stories (90–120s each)</h3>
  <ol>
    <li><strong>Tough customer</strong> → calm plan → fix → metric → one learning I reused.</li>
    <li><strong>Ambiguous ask</strong> → questions → minimal viable solution → one learning.</li>
    <li><strong>Process improvement</strong> (checklist/runbook) → fewer repeats/TTR → learning.</li>
    <li><strong>Learning fast</strong> (new tool in a week) → outcome → learning.</li>
  </ol>

  <h2>Why This Matters</h2>
  <p>
    My goal isn’t just to “pass interviews.” It’s to train like I’m already in STEP: 
    building, collaborating, documenting, and solving in real contexts. That way when I apply,
    I’m not just a student grinding problems — I’m someone who ships, learns, and communicates.
  </p>

  <h2>Takeaway</h2>
  <p>
    The edge isn’t secret questions; it’s <strong>systems</strong>. This roadmap gives me a repeatable loop:
    daily caps, spaced redos, doc-mode practice, and targeted videos. I’ll keep both doors open (STEP and
    apprenticeships), tell the truth on applications, and make steady progress — even on low-energy days.
  </p>
</BlogLayout>